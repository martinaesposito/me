//TESTO COLORATO
let cooolors = [
  "#FF9900",
  "#FF4E4E",
  "#FF7DBC",
  "#7DA2FF",
  "#FFD37D",
  "#62D282",
  "#4251D6",
];

//EMOJIS
let emojiList = [
  "💘",
  "💝",
  "💖",
  "💗",
  "💓",
  "💞",
  "💕",
  "💟",
  "❣️",
  "💔",
  "❤️",
  "🧡",
  "💛",
  "💚",
  "💙",
  "💜",
  "🤎",
  "🖤",
  "🤍",
  "❤️‍",
  "🔥",
  "❤️‍",
  "🩹",
  "💯",
  "♨️",
  "💢",
  "💬",
  "👁️‍🗨️",
  "🗨️",
  "🗯️",
  "💭",
  "💤",
  "🌐",
  "♠️",
  "♥️",
  "♦️",
  "♣️",
  "🃏",
  "🀄️",
  "🎴",
  "🎭️",
  "🔇",
  "🔈️",
  "🔉",
  "🔊",
  "🔔",
  "🔕",
  "🎼",
  "🎵",
  "🎶",
  "💹",
  "🏧",
  "🚮",
  "🚰",
  "♿️",
  "🚹️",
  "🚺️",
  "🚻",
  "🚼️",
  "🚾",
  "🛂",
  "🛃",
  "🛄",
  "🛅",
  "⚠️",
  "🚸",
  "⛔️",
  "☢️",
  "☣️",
  "⬆️",
  "↗️",
  "➡️",
  "↘️",
  "⬇️",
  "↙️",
  "⬅️",
  "↖️",
  "↕️",
  "↔️",
  "↩️",
  "↪️",
  "⤴️",
  "⤵️",
  "🔃",
  "🔄",
  "🔙",
  "🔚",
  "🔛",
  "🔜",
  "🔝",
  "🛐",
  "⚛️",
  "🕉️",
  "✡️",
  "☸️",
  "☯️",
  "✝️",
  "☦️",
  "☪️",
  "☮️",
  "🕎",
  "🔯",
  "♈️",
  "♉️",
  "♊️",
  "♋️",
  "♌️",
  "♍️",
  "♎️",
  "♏️",
  "♐️",
  "♑️",
  "♒️",
  "♓️",
  "⛎",
  "🔀",
  "🔁",
  "🔂",
  "▶️",
  "⏩️",
  "⏭️",
  "⏯️",
  "◀️",
  "⏪️",
  "⏮️",
  "🔼",
  "⏫",
  "🔽",
  "⏬",
  "⏸️",
  "⏹️",
  "⏺️",
  "⏏️",
  "🎦",
  "🔅",
  "🔆",
  "📶",
  "📳",
  "📴",
  "♀️",
  "♂️",
  "⚧",
  "✖️",
  "➕",
  "➖",
  "➗",
  "♾️",
  "‼️",
  "⁉️",
  "❓️",
  "❔",
  "❕",
  "❗️",
  "〰️",
  "💱",
  "💲",
  "⚕️",
  "♻️",
  "⚜️",
  "🔱",
  "📛",
  "🔰",
  "⭕️",
  "✅",
  "☑️",
  "✔️",
  "❌",
  "❎",
  "➰",
  "➿",
  "〽️",
  "✳️",
  "✴️",
  "❇️",
  "©️",
  "®️",
  "™️",
  "#️⃣",
  "*️⃣",
  "0️⃣",
  "1️⃣",
  "2️⃣",
  "3️⃣",
  "4️⃣",
  "5️⃣",
  "6️⃣",
  "7️⃣",
  "8️⃣",
  "9️⃣",
  "🔟",
  "🔠",
  "🔡",
  "🔢",
  "🔣",
  "🔤",
  "🅰️",
  "🆎",
  "🅱️",
  "🆑",
  "🆒",
  "🆓",
  "ℹ️",
  "🆔",
  "Ⓜ️",
  "🆕",
  "🆖",
  "🅾️",
  "🆗",
  "🅿️",
  "🆘",
  "🆙",
  "🆚",
  "🈁",
  "🈂️",
  "🈷️",
  "🈶",
  "🈯️",
  "🉐",
  "🈹",
  "🈚️",
  "🈲",
  "🉑",
  "🈸",
  "🈴",
  "🈳",
  "㊗️",
  "㊙️",
  "🈺",
  "🈵",
  "🔴",
  "🟠",
  "🟡",
  "🟢",
  "🔵",
  "🟣",
  "🟤",
  "⚫️",
  "⚪️",
  "🟥",
  "🟧",
  "🟨",
  "🟩",
  "🟦",
  "🟪",
  "🟫",
  "⬛️",
  "⬜️",
  "◼️",
  "◻️",
  "◾️",
  "◽️",
  "▪️",
  "▫️",
  "🔶",
  "🔷",
  "🔸",
  "🔹",
  "🔺",
  "🔻",
  "💠",
  "🔘",
  "🔳",
  "🔲",
  "🕛️",
  "🕧️",
  "🕐️",
  "🕜️",
  "🕑️",
  "🕝️",
  "🕒️",
  "🕞️",
  "🕓️",
  "🕟️",
  "🕔️",
  "🕠️",
  "🕕️",
  "🕡️",
  "🕖️",
  "🕢️",
  "🕗️",
  "🕣️",
  "🕘️",
  "🕤️",
  "🕙️",
  "🕥️",
  "🕚️",
  "🕦️",
  "*️",
  "#️",
  "0️",
  "1️",
  "2️",
  "3️",
  "4️",
  "5️",
  "6️",
  "7️",
  "8️",
  "9️",
  "🛎️",
  "🧳",
  "⌛️",
  "⏳️",
  "⌚️",
  "⏰",
  "⏱️",
  "⏲️",
  "🕰️",
  "🌡️",
  "🗺️",
  "🧭",
  "🎃",
  "🎄",
  "🧨",
  "🎈",
  "🎉",
  "🎊",
  "🎎",
  "🎏",
  "🎐",
  "🎀",
  "🎁",
  "🎗️",
  "🎟️",
  "🎫",
  "🔮",
  "🧿",
  "🎮️",
  "🕹️",
  "🎰",
  "🎲",
  "♟️",
  "🧩",
  "🧸",
  "🖼️",
  "🎨",
  "🧵",
  "🧶",
  "👓️",
  "🕶️",
  "🥽",
  "🥼",
  "🦺",
  "👔",
  "👕",
  "👖",
  "🧣",
  "🧤",
  "🧥",
  "🧦",
  "👗",
  "👘",
  "🥻",
  "🩱",
  "🩲",
  "🩳",
  "👙",
  "👚",
  "👛",
  "👜",
  "👝",
  "🛍️",
  "🎒",
  "👞",
  "👟",
  "🥾",
  "🥿",
  "👠",
  "👡",
  "🩰",
  "👢",
  "👑",
  "👒",
  "🎩",
  "🎓️",
  "🧢",
  "⛑️",
  "📿",
  "💄",
  "💍",
  "💎",
  "📢",
  "📣",
  "📯",
  "🎙️",
  "🎚️",
  "🎛️",
  "🎤",
  "🎧️",
  "📻️",
  "🎷",
  "🎸",
  "🎹",
  "🎺",
  "🎻",
  "🪕",
  "🥁",
  "📱",
  "📲",
  "☎️",
  "📞",
  "📟️",
  "📠",
  "🔋",
  "🔌",
  "💻️",
  "🖥️",
  "🖨️",
  "⌨️",
  "🖱️",
  "🖲️",
  "💽",
  "💾",
  "💿️",
  "📀",
  "🧮",
  "🎥",
  "🎞️",
  "📽️",
  "🎬️",
  "📺️",
  "📷️",
  "📸",
  "📹️",
  "📼",
  "🔍️",
  "🔎",
  "🕯️",
  "💡",
  "🔦",
  "🏮",
  "🪔",
  "📔",
  "📕",
  "📖",
  "📗",
  "📘",
  "📙",
  "📚️",
  "📓",
  "📒",
  "📃",
  "📜",
  "📄",
  "📰",
  "🗞️",
  "📑",
  "🔖",
  "🏷️",
  "💰️",
  "💴",
  "💵",
  "💶",
  "💷",
  "💸",
  "💳️",
  "🧾",
  "✉️",
  "💌",
  "📧",
  "🧧",
  "📨",
  "📩",
  "📤️",
  "📥️",
  "📦️",
  "📫️",
  "📪️",
  "📬️",
  "📭️",
  "📮",
  "🗳️",
  "✏️",
  "✒️",
  "🖋️",
  "🖊️",
  "🖌️",
  "🖍️",
  "📝",
  "💼",
  "📁",
  "📂",
  "🗂️",
  "📅",
  "📆",
  "🗒️",
  "🗓️",
  "📇",
  "📈",
  "📉",
  "📊",
  "📋️",
  "📌",
  "📍",
  "📎",
  "🖇️",
  "📏",
  "📐",
  "✂️",
  "🗃️",
  "🗄️",
  "🗑️",
  "🔒️",
  "🔓️",
  "🔏",
  "🔐",
  "🔑",
  "🗝️",
  "🔨",
  "🪓",
  "⛏️",
  "⚒️",
  "🛠️",
  "🗡️",
  "⚔️",
  "💣️",
  "🏹",
  "🛡️",
  "🔧",
  "🔩",
  "⚙️",
  "🗜️",
  "⚖️",
  "🦯",
  "🔗",
  "⛓️",
  "🧰",
  "🧲",
  "⚗️",
  "🧪",
  "🧫",
  "🧬",
  "🔬",
  "🔭",
  "📡",
  "💉",
  "🩸",
  "💊",
  "🩹",
  "🩺",
  "🚪",
  "🛏️",
  "🛋️",
  "🪑",
  "🚽",
  "🚿",
  "🛁",
  "🪒",
  "🧴",
  "🧷",
  "🧹",
  "🧺",
  "🧻",
  "🧼",
  "🧽",
  "🧯",
  "🛒",
  "🚬",
  "⚰️",
  "⚱️",
  "🏺",
  "🕳️",
  "🏔️",
  "⛰️",
  "🌋",
  "🗻",
  "🏕️",
  "🏖️",
  "🏜️",
  "🏝️",
  "🏟️",
  "🏛️",
  "🏗️",
  "🧱",
  "🏘️",
  "🏚️",
  "🏠️",
  "🏡",
  "🏢",
  "🏣",
  "🏤",
  "🏥",
  "🏦",
  "🏨",
  "🏩",
  "🏪",
  "🏫",
  "🏬",
  "🏭️",
  "🏯",
  "🏰",
  "💒",
  "🗼",
  "🗽",
  "⛪️",
  "🕌",
  "🛕",
  "🕍",
  "⛩️",
  "🕋",
  "⛲️",
  "⛺️",
  "🌁",
  "🌃",
  "🏙️",
  "🌄",
  "🌅",
  "🌆",
  "🌇",
  "🌉",
  "🗾",
  "🏞️",
  "🎠",
  "🎡",
  "🎢",
  "💈",
  "🎪",
  "🚂",
  "🚃",
  "🚄",
  "🚅",
  "🚆",
  "🚇️",
  "🚈",
  "🚉",
  "🚊",
  "🚝",
  "🚞",
  "🚋",
  "🚌",
  "🚍️",
  "🚎",
  "🚐",
  "🚑️",
  "🚒",
  "🚓",
  "🚔️",
  "🚕",
  "🚖",
  "🚗",
  "🚘️",
  "🚙",
  "🚚",
  "🚛",
  "🚜",
  "🏎️",
  "🏍️",
  "🛵",
  "🦽",
  "🦼",
  "🛺",
  "🚲️",
  "🛴",
  "🛹",
  "🚏",
  "🛣️",
  "🛤️",
  "🛢️",
  "⛽️",
  "🚨",
  "🚥",
  "🚦",
  "🛑",
  "🚧",
  "⚓️",
  "⛵️",
  "🛶",
  "🚤",
  "🛳️",
  "⛴️",
  "🛥️",
  "🚢",
  "✈️",
  "🛩️",
  "🛫",
  "🛬",
  "🪂",
  "💺",
  "🚁",
  "🚟",
  "🚠",
  "🚡",
  "🛰️",
  "🚀",
  "🛸",
  "🎆",
  "🎇",
  "🎑",
  "🗿",
  "⚽️",
  "⚾️",
  "🥎",
  "🏀",
  "🏐",
  "🏈",
  "🏉",
  "🎾",
  "🥏",
  "🎳",
  "🏏",
  "🏑",
  "🏒",
  "🥍",
  "🏓",
  "🏸",
  "🥊",
  "🥋",
  "🥅",
  "⛳️",
  "⛸️",
  "🎣",
  "🤿",
  "🎽",
  "🎿",
  "🛷",
  "🥌",
  "🎯",
  "🪀",
  "🪁",
  "🎱",
  "🎖️",
  "🏆️",
  "🏅",
  "🥇",
  "🥈",
  "🥉",
  "🍇",
  "🍈",
  "🍉",
  "🍊",
  "🍋",
  "🍌",
  "🍍",
  "🥭",
  "🍎",
  "🍏",
  "🍐",
  "🍑",
  "🍒",
  "🍓",
  "🥝",
  "🍅",
  "🥥",
  "🥑",
  "🍆",
  "🥔",
  "🥕",
  "🌽",
  "🌶️",
  "🥒",
  "🥬",
  "🥦",
  "🧄",
  "🧅",
  "🍄",
  "🥜",
  "🌰",
  "🍞",
  "🥐",
  "🥖",
  "🥨",
  "🥯",
  "🥞",
  "🧇",
  "🧀",
  "🍖",
  "🍗",
  "🥩",
  "🥓",
  "🍔",
  "🍟",
  "🍕",
  "🌭",
  "🥪",
  "🌮",
  "🌯",
  "🥙",
  "🧆",
  "🥚",
  "🍳",
  "🥘",
  "🍲",
  "🥣",
  "🥗",
  "🍿",
  "🧈",
  "🧂",
  "🥫",
  "🍱",
  "🍘",
  "🍙",
  "🍚",
  "🍛",
  "🍜",
  "🍝",
  "🍠",
  "🍢",
  "🍣",
  "🍤",
  "🍥",
  "🥮",
  "🍡",
  "🥟",
  "🥠",
  "🥡",
  "🍦",
  "🍧",
  "🍨",
  "🍩",
  "🍪",
  "🎂",
  "🍰",
  "🧁",
  "🥧",
  "🍫",
  "🍬",
  "🍭",
  "🍮",
  "🍯",
  "🍼",
  "🥛",
  "☕️",
  "🍵",
  "🍶",
  "🍾",
  "🍷",
  "🍸️",
  "🍹",
  "🍺",
  "🍻",
  "🥂",
  "🥃",
  "🥤",
  "🧃",
  "🧉",
  "🧊",
  "🥢",
  "🍽️",
  "🍴",
  "🥄",
  "🔪",
  "🐵",
  "🐒",
  "🦍",
  "🦧",
  "🐶",
  "🐕️",
  "🦮",
  "🐕‍",
  "🦺",
  "🐩",
  "🐺",
  "🦊",
  "🦝",
  "🐱",
  "🐈️",
  "🐈‍",
  "🦁",
  "🐯",
  "🐅",
  "🐆",
  "🐴",
  "🐎",
  "🦄",
  "🦓",
  "🦌",
  "🐮",
  "🐂",
  "🐃",
  "🐄",
  "🐷",
  "🐖",
  "🐗",
  "🐽",
  "🐏",
  "🐑",
  "🐐",
  "🐪",
  "🐫",
  "🦙",
  "🦒",
  "🐘",
  "🦏",
  "🦛",
  "🐭",
  "🐁",
  "🐀",
  "🐹",
  "🐰",
  "🐇",
  "🐿️",
  "🦔",
  "🦇",
  "🐻",
  "🐻‍",
  "❄️",
  "🐨",
  "🐼",
  "🦥",
  "🦦",
  "🦨",
  "🦘",
  "🦡",
  "🐾",
  "🦃",
  "🐔",
  "🐓",
  "🐣",
  "🐤",
  "🐥",
  "🐦️",
  "🐧",
  "🕊️",
  "🦅",
  "🦆",
  "🦢",
  "🦉",
  "🦩",
  "🦚",
  "🦜",
  "🐸",
  "🐊",
  "🐢",
  "🦎",
  "🐍",
  "🐲",
  "🐉",
  "🦕",
  "🦖",
  "🐳",
  "🐋",
  "🐬",
  "🐟️",
  "🐠",
  "🐡",
  "🦈",
  "🐙",
  "🦑",
  "🦀",
  "🦞",
  "🦐",
  "🦪",
  "🐚",
  "🐌",
  "🦋",
  "🐛",
  "🐜",
  "🐝",
  "🐞",
  "🦗",
  "🕷️",
  "🕸️",
  "🦂",
  "🦟",
  "🦠",
  "💐",
  "🌸",
  "💮",
  "🏵️",
  "🌹",
  "🥀",
  "🌺",
  "🌻",
  "🌼",
  "🌷",
  "🌱",
  "🌲",
  "🌳",
  "🌴",
  "🌵",
  "🎋",
  "🎍",
  "🌾",
  "🌿",
  "☘️",
  "🍀",
  "🍁",
  "🍂",
  "🍃",
  "🌍️",
  "🌎️",
  "🌏️",
  "🌑",
  "🌒",
  "🌓",
  "🌔",
  "🌕️",
  "🌖",
  "🌗",
  "🌘",
  "🌙",
  "🌚",
  "🌛",
  "🌜️",
  "☀️",
  "🌝",
  "🌞",
  "🪐",
  "💫",
  "⭐️",
  "🌟",
  "✨",
  "🌠",
  "🌌",
  "☁️",
  "⛅️",
  "⛈️",
  "🌤️",
  "🌥️",
  "🌦️",
  "🌧️",
  "🌨️",
  "🌩️",
  "🌪️",
  "🌫️",
  "🌬️",
  "🌀",
  "🌈",
  "🌂",
  "☂️",
  "☔️",
  "⛱️",
  "⚡️",
  "❄️",
  "☃️",
  "⛄️",
  "☄️",
  "🔥",
  "💧",
  "🌊",
  "💥",
  "💦",
  "💨",
  "😀",
  "😃",
  "😄",
  "😁",
  "😆",
  "😅",
  "🤣",
  "😂",
  "🙂",
  "🙃",
  "😉",
  "😊",
  "😇",
  "🥰",
  "😍",
  "🤩",
  "😘",
  "😗",
  "☺️",
  "😚",
  "😙",
  "😋",
  "😛",
  "😜",
  "🤪",
  "😝",
  "🤑",
  "🤗",
  "🤭",
  "🤫",
  "🤔",
  "🤐",
  "🤨",
  "😐️",
  "😑",
  "😶",
  "😏",
  "😒",
  "🙄",
  "😬",
  "🤥",
  "😌",
  "😔",
  "😪",
  "😮‍",
  "💨",
  "🤤",
  "😴",
  "😷",
  "🤒",
  "🤕",
  "🤢",
  "🤮",
  "🤧",
  "🥵",
  "🥶",
  "😶‍",
  "🌫️",
  "🥴",
  "😵‍",
  "💫",
  "😵",
  "🤯",
  "🤠",
  "🥳",
  "😎",
  "🤓",
  "🧐",
  "😕",
  "😟",
  "🙁",
  "☹️",
  "😮",
  "😯",
  "😲",
  "😳",
  "🥺",
  "😦",
  "😧",
  "😨",
  "😰",
  "😥",
  "😢",
  "😭",
  "😱",
  "😖",
  "😣",
  "😞",
  "😓",
  "😩",
  "😫",
  "🥱",
  "😤",
  "😡",
  "😠",
  "🤬",
  "😈",
  "👿",
  "💀",
  "☠️",
  "💩",
  "🤡",
  "👹",
  "👺",
  "👻",
  "👽️",
  "👾",
  "🤖",
  "😺",
  "😸",
  "😹",
  "😻",
  "😼",
  "😽",
  "🙀",
  "😿",
  "😾",
  "🙈",
  "🙉",
  "🙊",
  "👋",
  "🤚",
  "🖐️",
  "✋",
  "🖖",
  "👌",
  "🤏",
  "✌️",
  "🤞",
  "🤟",
  "🤘",
  "🤙",
  "👈️",
  "👉️",
  "👆️",
  "🖕",
  "👇️",
  "☝️",
  "👍️",
  "👎️",
  "✊",
  "👊",
  "🤛",
  "🤜",
  "👏",
  "🙌",
  "👐",
  "🤲",
  "🤝",
  "🙏",
  "✍️",
  "💅",
  "🤳",
  "💪",
  "🦾",
  "🦿",
  "🦵",
  "🦶",
  "👂️",
  "🦻",
  "👃",
  "🧠",
  "🦷",
  "🦴",
  "👀",
  "👁️",
  "👅",
  "👄",
  "💋",
  "👶",
  "🧒",
  "👦",
  "👧",
  "🧑",
  "👨",
  "👩",
  "🧔",
  "🧔‍♀️",
  "🧔‍♂️",
  "🧑",
  "👨‍",
  "🦰",
  "👩‍",
  "🦰",
  "🧑",
  "👨‍",
  "🦱",
  "👩‍",
  "🦱",
  "🧑",
  "👨‍",
  "🦳",
  "👩‍",
  "🦳",
  "🧑",
  "👨‍",
  "🦲",
  "👩‍",
  "🦲",
  "👱",
  "👱‍♂️",
  "👱‍♀️",
  "🧓",
  "👴",
  "👵",
  "🙍",
  "🙍‍♂️",
  "🙍‍♀️",
  "🙎",
  "🙎‍♂️",
  "🙎‍♀️",
  "🙅",
  "🙅‍♂️",
  "🙅‍♀️",
  "🙆",
  "🙆‍♂️",
  "🙆‍♀️",
  "💁",
  "💁‍♂️",
  "💁‍♀️",
  "🙋",
  "🙋‍♂️",
  "🙋‍♀️",
  "🧏",
  "🧏‍♂️",
  "🧏‍♀️",
  "🙇",
  "🙇‍♂️",
  "🙇‍♀️",
  "🤦",
  "🤦‍♂️",
  "🤦‍♀️",
  "🤷",
  "🤷‍♂️",
  "🤷‍♀️",
  "🧑‍⚕️",
  "👨‍⚕️",
  "👩‍⚕️",
  "🧑‍🎓",
  "👨‍🎓",
  "👩‍🎓",
  "🧑‍🏫",
  "👨‍🏫",
  "👩‍🏫",
  "🧑‍⚖️",
  "👨‍⚖️",
  "👩‍⚖️",
  "🧑‍🌾",
  "👨‍🌾",
  "👩‍🌾",
  "🧑‍🍳",
  "👨‍🍳",
  "👩‍🍳",
  "🧑‍🔧",
  "👨‍🔧",
  "👩‍🔧",
  "🧑‍🏭",
  "👨‍🏭",
  "👩‍🏭",
  "🧑‍💼",
  "👨‍💼",
  "👩‍💼",
  "🧑‍🔬",
  "👨‍🔬",
  "👩‍🔬",
  "🧑‍💻",
  "👨‍💻",
  "👩‍💻",
  "🧑‍🎤",
  "👨‍🎤",
  "👩‍🎤",
  "🧑‍🎨",
  "👨‍🎨",
  "👩‍🎨",
  "🧑‍✈️",
  "👨‍✈️",
  "👩‍✈️",
  "🧑‍🚀",
  "👨‍🚀",
  "👩‍🚀",
  "🧑‍🚒",
  "👨‍🚒",
  "👩‍🚒",
  "👮",
  "👮‍♂️",
  "👮‍♀️",
  "🕵️",
  "🕵️‍♂️",
  "🕵️‍♀️",
  "💂",
  "💂‍♂️",
  "💂‍♀️",
  "👷",
  "👷‍♂️",
  "👷‍♀️",
  "🤴",
  "👸",
  "👳",
  "👳‍♂️",
  "👳‍♀️",
  "👲",
  "🧕",
  "🤵",
  "🤵‍♂️",
  "🤵‍♀️",
  "👰",
  "👰‍♂️",
  "👰‍♀️",
  "🤰",
  "🤱",
  "👩‍",
  "🍼",
  "👨‍",
  "🍼",
  "🧑‍",
  "🍼",
  "👼",
  "🎅",
  "🤶",
  "🧑‍",
  "🎄",
  "🦸",
  "🦸‍♂️",
  "🦸‍♀️",
  "🦹",
  "🦹‍♂️",
  "🦹‍♀️",
  "🧙",
  "🧙‍♂️",
  "🧙‍♀️",
  "🧚",
  "🧚‍♂️",
  "🧚‍♀️",
  "🧛",
  "🧛‍♂️",
  "🧛‍♀️",
  "🧜",
  "🧜‍♂️",
  "🧜‍♀️",
  "🧝",
  "🧝‍♂️",
  "🧝‍♀️",
  "🧞",
  "🧞‍♂️",
  "🧞‍♀️",
  "🧟",
  "🧟‍♂️",
  "🧟‍♀️",
  "💆",
  "💆‍♂️",
  "💆‍♀️",
  "💇",
  "💇‍♂️",
  "💇‍♀️",
  "🚶",
  "🚶‍♂️",
  "🚶‍♀️",
  "🧍",
  "🧍‍♂️",
  "🧍‍♀️",
  "🧎",
  "🧎‍♂️",
  "🧎‍♀️",
  "🧑‍",
  "🦯",
  "👨‍",
  "🦯",
  "👩‍",
  "🦯",
  "🧑‍",
  "🦼",
  "👨‍",
  "🦼",
  "👩‍",
  "🦼",
  "🧑‍",
  "🦽",
  "👨‍",
  "🦽",
  "👩‍",
  "🦽",
  "🏃",
  "🏃‍♂️",
  "🏃‍♀️",
  "💃",
  "🕺",
  "🕴️",
  "👯",
  "👯‍♂️",
  "👯‍♀️",
  "🧖",
  "🧖‍♂️",
  "🧖‍♀️",
  "🧗",
  "🧗‍♂️",
  "🧗‍♀️",
  "🤺",
  "🏇",
  "⛷️",
  "🏂️",
  "🏌️",
  "🏌️‍♂️",
  "🏌️‍♀️",
  "🏄️",
  "🏄‍♂️",
  "🏄‍♀️",
  "🚣",
  "🚣‍♂️",
  "🚣‍♀️",
  "🏊️",
  "🏊‍♂️",
  "🏊‍♀️",
  "⛹️",
  "⛹️‍♂️",
  "⛹️‍♀️",
  "🏋️",
  "🏋️‍♂️",
  "🏋️‍♀️",
  "🚴",
  "🚴‍♂️",
  "🚴‍♀️",
  "🚵",
  "🚵‍♂️",
  "🚵‍♀️",
  "🤸",
  "🤸‍♂️",
  "🤸‍♀️",
  "🤼",
  "🤼‍♂️",
  "🤼‍♀️",
  "🤽",
  "🤽‍♂️",
  "🤽‍♀️",
  "🤾",
  "🤾‍♂️",
  "🤾‍♀️",
  "🤹",
  "🤹‍♂️",
  "🤹‍♀️",
  "🧘",
  "🧘‍♂️",
  "🧘‍♀️",
  "🛀",
  "🛌",
  "🧑‍",
  "🤝‍",
  "🧑",
  "👭",
  "👫",
  "👬",
  "💏",
  "👩‍❤️‍💋‍👨",
  "👨‍❤️‍💋‍👨",
  "👩‍❤️‍💋‍👩",
  "💑",
  "👩‍❤️‍👨",
  "👨‍❤️‍👨",
  "👩‍❤️‍👩",
  "👪️",
  "👨‍👩‍👦",
  "👨‍👩‍👧",
  "👨‍👩‍👧‍👦",
  "👨‍👩‍👦‍👦",
  "👨‍👩‍👧‍👧",
  "👨‍👨‍👦",
  "👨‍👨‍👧",
  "👨‍👨‍👧‍👦",
  "👨‍👨‍👦‍👦",
  "👨‍👨‍👧‍👧",
  "👩‍👩‍👦",
  "👩‍👩‍👧",
  "👩‍👩‍👧‍👦",
  "👩‍👩‍👦‍👦",
  "👩‍👩‍👧‍👧",
  "👨‍👦",
  "👨‍👦‍👦",
  "👨‍👧",
  "👨‍👧‍👦",
  "👨‍👧‍👧",
  "👩‍👦",
  "👩‍👦‍👦",
  "👩‍👧",
  "👩‍👧‍👦",
  "👩‍👧‍👧",
  "🗣️",
  "👤",
  "👥",
  "👣",
];
const filterEmojiVariants = (emojis) => {
  const seen = new Set();

  return emojis.filter((emoji) => {
    const baseEmoji = emoji.replace(/‍♂️|‍♀️|‍/g, ""); // Rimuove varianti di genere e ZWJ
    if (!seen.has(baseEmoji)) {
      seen.add(baseEmoji);
      return true;
    }
    return false;
  });
};

const filteredEmojis = filterEmojiVariants(emojiList);

//SELEZIONE + SEPARAZIONE DEL TESTO
let allText = document.querySelectorAll(".selfp"); //prendo tutti i paragrafi della descrizione

allText.forEach((txt) => {
  let strTxt = txt.textContent; // prendo il contenuto del testo
  let words = strTxt.split(" ");
  txt.textContent = ""; // Svuoto il contenuto del testo

  words.forEach((word) => {
    let wordSpan = document.createElement("span");
    wordSpan.classList.add("word");
    let splitTxt = word.split(""); // creo un array con tutte le lettere (inclusi gli spazi)

    splitTxt.forEach((char) => {
      // Verifica se il carattere è uno spazio
      if (char === " ") {
        txt.innerHTML += " "; // Aggiungi uno spazio normale (non racchiuso in <span>)
      } else {
        let span = document.createElement("span");
        span.classList.add("char");
        span.textContent = char;
        wordSpan.appendChild(span); // Aggiungi le altre lettere racchiuse in <span>
      }
    });

    let space = document.createElement("span");
    space.innerHTML = "&nbsp;";
    wordSpan.appendChild(space);

    txt.appendChild(wordSpan);
  });
});

let snglLet = document.querySelectorAll("span.char"); //select the single letter;
let l;

let prevN = null;

function generateRandomNumber() {
  let newN;

  do {
    // Se c'è già un numero salvato, continua a generare finché non è diverso
    newN = Math.floor(Math.random() * 2) + 1;
  } while (newN === prevN);

  prevN = newN; // Salva il nuovo numero nella variabile
  return newN;
}

////////////////////////////

//animazione delle lettere dopo 7,5 sec di inattività
let lastInteraction = Date.now(); // timestamp aggiornato a ogni movimento
let idleCheckInterval;

idleCheckInterval = setInterval(() => {
  if (Date.now() - lastInteraction > 7500) {
    animateRandomLetters(floor(random(4, 16))); // ne muove 2
    lastInteraction = Date.now();
  }
}, 500);

function animateRandomLetters(count) {
  if (!snglLet || snglLet.length === 0) return;

  let animated = 0;
  while (animated < count) {
    let groupSize = Math.floor(random(2, 5)); // gruppi da 2 a 4
    if (animated + groupSize > count) groupSize = count - animated;

    setTimeout(() => {
      for (let j = 0; j < groupSize; j++) {
        let l = snglLet[Math.floor(Math.random() * snglLet.length)];
        let n = generateRandomNumber();

        if (n == 1) {
          l.style.color = cooolors[Math.floor(Math.random() * cooolors.length)];
          l.style.display = "inline-block";
          l.style.transform = `translate(${Math.floor(
            Math.random() * 40 - 20
          )}px, ${Math.floor(Math.random() * 40 - 20)}px)`;

          setTimeout(() => {
            l.style.transform = "translate(0, 0)";
            l.style.color = "";
          }, 1000);
        } else if (n == 2) {
          let origC = l.dataset.origC || l.innerHTML;
          l.dataset.origC = origC;
          l.innerHTML =
            filteredEmojis[Math.floor(Math.random() * filteredEmojis.length)];

          setTimeout(() => {
            l.innerHTML = l.dataset.origC;
          }, 1000);
        }
      }
    }, animated * random(80, 200)); // delay irregolare tra i gruppi

    animated += groupSize;
  }
}

//APPLICO I DIVERSI EFFETTI ALLE LETTERE
//DESKTOP
snglLet.forEach((l) => {
  l.addEventListener("mouseover", () => {
    lastInteraction = Date.now();
    let n = generateRandomNumber();
    // console.log(n);
    if (n == 1) {
      //effetto letterine
      l.style.color = cooolors[Math.floor(Math.random() * (6 - 0) + 0)];
      l.style.display = "inline-block";
      l.style.transform =
        "translate(" +
        Math.floor(Math.random() * (30 - -30) - 30) +
        "px, " +
        Math.floor(Math.random() * (30 - -30) - 30) +
        "px)";
      l.style.animation = "ease 3s";

      setTimeout(function () {
        l.style.transition = "transform 0.3s ease, color 0.25s ease";
        l.style.transform = "translate(0, 0)"; // Ritorna alla posizione originale
        l.style.color = "";
      }, 1000);
    } else if (n == 2) {
      //effetto emoji
      let origC = l.dataset.origC || l.innerHTML;
      l.dataset.origC = origC; // Save original content

      l.innerHTML =
        filteredEmojis[Math.floor(Math.random() * filteredEmojis.length)];

      setTimeout(function () {
        l.style.transform = "translate(0, 0)"; // Ritorna alla posizione originale
        l.innerHTML = origC;
      }, 1000);
    }
  });
});

//MOBILE
// creo una canva di p5 in background così da poter adoperare la posizione del mouse rispetto alla canva per far muovere le lettere
function setup() {
  createCanvas(windowWidth, windowHeight);
  background("white");
}

function touchMoved() {
  touchPos = { x: mouseX, y: mouseY };
}

let touchPos;

document.addEventListener("touchmove", (e) => {
  lastInteraction = Date.now();
  snglLet.forEach((l) => {
    const elPos = l.getBoundingClientRect(); // calcolo la posizione dell'elemento
    const distx = Math.abs(Math.floor(touchPos.x - elPos.x)); // distanza x rispetto alla posizione del touch
    const disty = Math.abs(Math.floor(touchPos.y - elPos.y)); // distanza y rispetto alla posizione del touch

    if (distx <= 20 && disty <= 20) {
      let n = generateRandomNumber();
      // console.log(n);
      if (n == 1) {
        // Se la distanza in x e y è inferiore a 20px
        l.style.color = cooolors[Math.floor(Math.random() * cooolors.length)];
        l.style.display = "inline-block";
        l.style.transform = `translate(${Math.floor(
          Math.random() * 40 - 20
        )}px, ${Math.floor(Math.random() * 40 - 20)}px)`;

        // Lascia la trasformazione attiva per 1 secondo dopo la fine del tocco
        l.timeout = setTimeout(() => {
          l.style.transform = "translate(0, 0)"; // Ritorna alla posizione originale
          l.style.color = ""; // Ripristina il colore originale
        }, 1000); // Aspetta 1 secondo prima di resettare lo stile
      } else if (n == 2) {
        // Store the original content before changing it
        let origC = l.dataset.origC || l.innerHTML; // Use data attribute if it exists
        l.dataset.origC = origC; // Save original content

        // Change to a random emoji
        l.innerHTML =
          filteredEmojis[Math.floor(Math.random() * filteredEmojis.length)];

        // Reset the innerHTML after 1 second
        setTimeout(() => {
          l.innerHTML = l.dataset.origC; // Return to the original content
        }, 1000); // Wait 1 second before resetting the content
      }
    }
  });
});

// //////////////////////////////////////////////////////////////////
async function fetchData(url) {
  try {
    const response = await fetch(url);
    return await response.json();
  } catch (error) {
    console.error("Error fetching data:", error);
    return [];
  }
}

async function generateCVSections(url) {
  const data = await fetchData(url);
  const container = document.getElementById("cv-container");

  // Grouping data by "Sezione"
  const groupedData = {};
  data.forEach((item) => {
    if (!groupedData[item.Sezione]) {
      groupedData[item.Sezione] = [];
    }
    groupedData[item.Sezione].push(item);
  });

  // Generating sections
  for (const section in groupedData) {
    const sectionDiv = document.createElement("div");
    sectionDiv.classList.add("cv-section");

    const sectionLabel = document.createElement("p");
    const sectionClass = section.toLowerCase().replace(/\s+/g, "-");
    sectionDiv.classList.add(sectionClass);
    sectionLabel.classList.add("label");
    sectionLabel.textContent = section;

    sectionDiv.appendChild(sectionLabel);

    groupedData[section].forEach((item) => {
      const cvElement = document.createElement("div");
      cvElement.classList.add("cv-element");

      // Create the title element
      let titleHTML =
        item.Link && item.Link.trim() !== ""
          ? `<a href="${item.Link}" target="_blank" rel="noopener noreferrer">${item.Nome}</a>`
          : item.Nome;

      cvElement.innerHTML = `
     <div id="title" class="cv-el-value">${titleHTML}</div>
     <div id="role" class="cv-el-value">${item.Ruolo}</div>
     <div id="place" class="cv-el-value">${item.Luogo || ""}</div>
     <div id="year" class="cv-el-value">${item.Year}</div>
   `;

      sectionDiv.appendChild(cvElement);
    });

    container.appendChild(sectionDiv);
  }

  document.body.appendChild(container); // Append the container to the body

  linkColor();
}

// Example usage
generateCVSections("assets/cv.json");
